-------------------------   
Plan for Jason 1.1

. capabilities
. if <test> then <c> [else <c>]; in plan body
  (or special internal action like 
   .if(b & a, action1; action2)


-----------------------------------
Projects (!)
. Eclipse plug-in to edit/run jason
. Jason for large scale
. AS to Java for running in the Lego JVM
. AS to programm robocode
. Mobility for jason agents
. Multi-environments (and agent entering/leaving them)
. Test units, as JUnit.
. functional programming with AS (functions as terms)




-----------------------------------
Documentation TODO

. Getting start 


-------------------------   

Discussed in April 06 meeting

. !! -> implemented
. div -> implemented

. +!idle event. (TODO)
  As an alternative: empty TE with 2 options:
  . high priority: evaluated before normal events
  . low: evaluated after normal events (or no event)

. stackable failure (TODO)

. many applicable plans when we have multiple unification of context
  TODO: add option relPlans=(singleUnif | multiUnif)



-------------------------   

Discussed in September/05 meeting
. meta-plans (postponed)
. Check permissions (public/private) for BB/Plans (postponed)
  - complex goals (e.g., +!(p(X) /\ q(X)))
    complex consult (e.g. ?(p(X) \/ q(X))
    msgs with complex formulae rather than atoms (p(X) /\ q(X))
    or think about interesting uses of plan for +?g
    (postponed)

  - empty triggering event or +!true (for maintenance goals ?)
    is it really necessary? probably just syntatic sugar,
    but extra part in the reasoning cycle or in place of event?
    (postponed)


. parallel architecture (no)
. declarative goals / persistent-goals etc. (Ok as goal patterns)
. backtraking for plan failure (just double check the existing mechanism) (FAQ)
. OR as well as AND in context etc. (ok)

. selection functions library (TODO)
. more internal actions to manipulate annots (create .removeAnnot)
. BB as an interface with different implementations (current, in DB, in prolog, ....) (TODO)

   . applicable plans: consider possible different unifications (the same plan will have one or more Options) and add a new configuration option: add all instantiations in the set of appl. plans instead or just one. (TODO)

  - inference in context (using the same inference available with ?).
    (TODO with clauses)

