<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="all" name="Jason">

    <property environment="env"/>

    <property name="javaHome" value="/usr"/>
	
    <property name="saciJar" value="${basedir}/lib/saci.jar"/>
    <property name="jasonJar" value="${basedir}/bin/jason.jar"/>
    <property name="jasonJarManifest" value="${basedir}/src/jasonManifest"/>

    <property name="dist.properties" value="${basedir}/bin/dist.properties"/>
    <property name="version" value="0"/>
    <property name="release" value="8alpha"/>
    <property name="distDir" value="${env.HOME}/tmp/Jason-${version}.${release}"/>
    <property name="distFile" value="${env.HOME}/Jason-${version}.${release}"/>

    <property name="jedit.install.dir"  value="${basedir}/lib/jedit"/>
    <property name="plugin.jar.name"  value="jason-jedit-plugin.jar"/>

    <path id="allPath">
        <pathelement location="${jasonJar}"/>
        <pathelement location="${saciJar}"/>
        <pathelement location="${basedir}/lib/junit.jar"/>
    	<pathelement location="${jedit.install.dir}/jedit.jar"/>
    	<pathelement location="${jedit.install.dir}/jars/ErrorList.jar"/>
    	<pathelement location="${jedit.install.dir}/jars/ProjectViewer.jar"/>
    	<pathelement location="${jedit.install.dir}/jars/SideKick.jar"/>
    </path>

    <condition property="jedit-ok" value="ok" >
		<or>
			<not><available file="${basedir}/lib/jedit.tgz" /></not>
	    	<uptodate 
	    		targetfile="${basedir}/lib/jedit" 
	    		srcfile="${basedir}/lib/jedit.tgz" />
		</or>
    </condition>

	<target name="untar-jedit" unless="jedit-ok">
        <echo message="Uncompressing jEdit" />
		<delete dir="${basedir}/lib/jedit" />
		<untar compression="gzip" dest="${basedir}/lib" src="${basedir}/lib/jedit.tgz" />
    </target>


	<target name="init" depends="untar-jedit">
		<mkdir dir="${basedir}/build/classes" />
    </target>


    <condition property="parsers-ok" value="ok" >
		<and>
	    	<uptodate property="parsers-ok"
	    		targetfile="${basedir}/src/jason/mas2j/parser/mas2j.java" 
	    		srcfile="${basedir}/src/jason/mas2j/parser/MAS2JavaParser.jcc" />
	    	<uptodate property="parsers-ok"
	    		targetfile="${basedir}/src/jason/asSyntax/parser/as2j.java" 
	    		srcfile="${basedir}/src/jason/asSyntax/parser/AS2JavaParser.jcc" />
		</and>
    </condition>

    <target name="parsers" depends="init" unless="parsers-ok">
        <delete failonerror="no" >
            <fileset dir="${basedir}/src/jason/mas2j/parser" includes="*.java" />
            <fileset dir="${basedir}/src/jason/asSyntax/parser" includes="*.java" />
        </delete>

        <java dir="${basedir}/src/jason/mas2j/parser" classname="javacc" fork="yes">
            <classpath location="${basedir}/lib/javacc.jar"/>
            <arg line="MAS2JavaParser.jcc" />
        </java>

        <java dir="${basedir}/src/jason/asSyntax/parser" classname="javacc" fork="yes">
            <classpath location="${basedir}/lib/javacc.jar"/>
            <arg line="AS2JavaParser.jcc" />
        </java>

        <java dir="${basedir}/src/jason/mas2j/parser" classname="jjdoc" fork="yes">
            <classpath location="${basedir}/lib/javacc.jar"/>
            <arg line="MAS2JavaParser.jcc" />
        </java>
    	<move file="${basedir}/src/jason/mas2j/parser/MAS2JavaParser.html" todir="${basedir}/doc" />

        <java dir="${basedir}/src/jason/asSyntax/parser" classname="jjdoc" fork="yes">
            <classpath location="${basedir}/lib/javacc.jar"/>
            <arg line="AS2JavaParser.jcc" />
        </java>
    	<move file="${basedir}/src/jason/asSyntax/parser/AS2JavaParser.html" todir="${basedir}/doc" />
    
    </target>


    <target name="compile" depends="init,parsers" >
        <javac srcdir="src" destdir="${basedir}/build/classes" 
        	debug="true" deprecation="true" optimize="true" 
        	nowarn="true"
        	source="1.4" target="1.4">
            <classpath refid="allPath"/>
        </javac>
    </target>

        
    <target name="jar" depends="compile">
        <propertyfile file="${dist.properties}">
            <entry key="version" value="${version}"/>
            <entry key="release" value="${release}"/>
            <entry default="0" key="build" operation="+" type="int"/>
            <entry key="build.date" type="date" value="now"/>
        </propertyfile>
        <property file="${dist.properties}"/>

    	<jar jarfile="${jasonJar}" manifest="${jasonJarManifest}">
		      <fileset dir="${basedir}/build/classes">
		            <include name="jason/**/*.class"/>
		            <include name="jIDE/**/*.class"/>
	    	        <include name="test/**/*.class"/>
		      </fileset>
		      <fileset dir="${basedir}/src">
		            <include name="images/**/*"/>
		            <include name="asl/**/*"/>
	    	        <include name="xml/**/*"/>
	        	    <include name="logging.properties"/>
		      </fileset>
		      <fileset dir="${basedir}/bin">
		            <include name="dist.properties"/>
		      </fileset>
        </jar>
    	<!--signjar jar="${jasonJar}" alias="jomi" storepass="fred3271" keystore="${basedir}/src/jomiKeystore" /-->
    </target>
  
	<target name="plugin" depends="compile, jar">
	    <jar jarfile="${jedit.install.dir}/jars/${plugin.jar.name}">
		      <fileset dir="${basedir}/src/jeditPlugin">
			        <include name="Jason.props"/>
		    	    <include name="index.html"/>
		        	<include name="actions.xml"/>
			        <include name="dockables.xml"/>
		      </fileset>
		      <fileset dir="${basedir}/build/classes">
		           	<include name="jason/**/*.class"/>
		           	<include name="jIDE/**/*.class"/>
		      </fileset>
		      <fileset dir="${basedir}/src">
	      	    	<include name="images/**/*"/>
	         	<include name="logging.properties"/>
		      </fileset>
	    </jar>
	    <copy todir="${jedit.install.dir}/modes">
		      <fileset dir="${basedir}/src/jeditPlugin">
		        	<include name="agentSpeak.xml"/>
			        <include name="jasonProject.xml"/>
			        <include name="catalog"/>
		      </fileset>
	    </copy>
	    <copy todir="${jedit.install.dir}/properties">
		      <fileset dir="${basedir}/src/jeditPlugin">
		        	<include name="jedit-initial.props"/>
		      </fileset>
	    </copy>
	  </target>
    
	  
    <target name="run" depends="jar,plugin" >
        <java dir="bin" classname="org.gjt.sp.jedit.jEdit" fork="yes">
            <classpath refid="allPath"/>
            <!--arg line="../examples/Auction/auction.mas2j" /-->
            <!--arg line="${saciHome} ${javaHome} ../examples/Simple/testCent.mas2j" /-->
        </java>
    </target>

	<target name="test" depends="jar">
	    <junit printsummary="yes" failureProperty="test.failure">
	      <classpath refid="allPath" />
	      <formatter type="plain" usefile="false" />
	      <batchtest>
	        <fileset dir="${basedir}/src" includes="**/test/*Test.java" />
	      </batchtest>
	    </junit>
		<fail message="test failed" if="test.failure" />
	</target>
	
	<target name="apidoc" depends="compile" >
        <javadoc author="true" destdir="${basedir}/doc/api" packagenames="jason.*" sourcepath="${basedir}/src" use="true" version="true" windowtitle="AgentSpeak Java Interpreter">
            <classpath refid="allPath"/>
        </javadoc>
    </target>

    <target name="dist" description="Build distribution." >
    	<!--depends="clean,cleanExamples,parsers,apidoc"  -->
	
    	  <antcall target="jar" />
    	
          <echo message="Generating Jason ${version}.${release}"/>

          <fixcrlf eol="crlf" includes="**/*.txt,**/*.bat" srcdir="${basedir}"/>

          <delete failonerror="no" includeEmptyDirs="true">
            <fileset dir="${distDir}"/>
          </delete>
     	  <delete dir="${distDir}"/>

          <mkdir dir="${distDir}"/>

          <copy todir="${distDir}">
            <fileset dir="${basedir}" includes="*.*"/>
            <fileset dir="${basedir}" includes="LICENSE"/>
            <fileset dir="${basedir}" includes="README"/>

            <fileset dir="${basedir}" includes="bin/**/*"/>
            <fileset dir="${basedir}" includes="doc/**/*"/>
            <fileset dir="${basedir}" includes="examples/**/*"/>
            <fileset dir="${basedir}" includes="lib/**/*" excludes="lib/jedit.tgz" />
            <fileset dir="${basedir}" includes="src/**/*"/>
          </copy>
	      <copy todir="${distDir}/doc">
    	      <fileset dir="${basedir}/../../agents/Jason-doc" includes="*.*"/>
          </copy>
          <copy todir="${distDir}/lib/jedit">
            <fileset dir="${jedit.install.dir}" includes="**/*"/>
          </copy>

          <tar compression="gzip" destfile="${distFile}.tgz">
            <tarfileset dir="${distDir}/.." mode="755" >
                <include name="Jason*/**/*.sh"/>
            </tarfileset>
            <tarfileset dir="${distDir}/.."  >
               <include name="Jason*/**/*"/>
               <exclude name="Jason*/**/*.sh"/>
            </tarfileset>
          </tar>
    </target>

    <target name="all" depends="parsers,compile,apidoc" description="Build everything." >
        <echo message="Application built."/>
    </target>

    <target name="cleanExamples">
        <delete failonerror="no" includeEmptyDirs="true" verbose="true">
            <fileset dir="${basedir}/examples" includes="**/classes/*"/>
            <fileset dir="${basedir}/examples" includes="**/classes"/>
            <fileset dir="${basedir}/examples" includes="**/*.class"/>
            <fileset dir="${basedir}/examples" includes="**/*.sh"/>
            <fileset dir="${basedir}/examples" includes="**/*.bat"/>
            <fileset dir="${basedir}/examples" includes="**/*.xml"/>
            <fileset dir="${basedir}/examples" includes="**/work"/>
        </delete>
    </target>

    <target name="clean">
        <delete failonerror="no" includeEmptyDirs="true" verbose="true">
            <fileset defaultexcludes="no" dir="${basedir}" includes="**/*~"/>
            <fileset dir="${basedir}" includes="**/*.class"/>
            <fileset dir="${basedir}" includes="**/core"/>
            <fileset dir="${basedir}/doc/api" includes="**/*"/>
            <fileset dir="${basedir}" includes="**/.nbattrs"/>
            <fileset dir="${basedir}" includes="**/*.backup"/>
            <fileset dir="${basedir}" includes="**/*.*~"/>
            <fileset dir="${basedir}" includes="bin/*.old"/>
            <fileset dir="${basedir}" includes="**/.err"/>
            <fileset dir="${basedir}/lib/saci/bin" includes="work"/>
        </delete>
    	<delete dir="${basedir}/build"/>
    </target>

</project>
